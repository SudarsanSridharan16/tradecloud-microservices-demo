constructr {
  coordination {
    host       = ${CONSUL_MASTER}
    port       = 8500
  }

  consul.agent-name = ${HOST}
}

tradecloud.kafka {
  bootstrapServers = ${KAFKA_BOOTSTRAP_SERVERS}
  acknowledgeTimeout = 5 seconds
  topicPrefix = ""
}

cassandra-journal {
  keyspace = "service_user_journal"
  table = "service_user_journal"
  replication-factor = 1
}

cassandra-snapshot-store {
  keyspace = "service_user_snapshot"
  table = "service_user_snapshot"
  replication-factor = 1
}

app {
  numberOfNodes = 3
}

akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      common = "nl.tradecloud.common.protobuf.Serializer"
    }

    serialization-bindings {
      "com.trueaccord.scalapb.GeneratedMessage" = proto
      "nl.tradecloud.common.events.UserCreated" = common
      "nl.tradecloud.common.events.IdentityCreated" = common
    }
  }

  http.session {
    secret = "c05ll3lesrinf39t7mc5h6un6r0c69lgfno69dsak3vabeqamouq4328cuaekros401ajdpkh60rrtpd8ro24rbuqmgtnd1ebag6ljnb65i8a55d482ok7o0nch0bfbe"
  }

  extensions = [
    akka.persistence.Persistence,
    de.heikoseeberger.constructr.akka.ConstructrExtension,
    nl.tradecloud.kafka.KafkaExtension
  ]

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal {
      auto-start-journals = [""]
      plugin = cassandra-journal
//      plugin = akka.persistence.journal.leveldb
    }

    snapshot-store {
      plugin = cassandra-snapshot-store
//      plugin = akka.persistence.snapshot-store.local
    }
  }
}